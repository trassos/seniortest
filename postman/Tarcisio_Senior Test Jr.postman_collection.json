{
	"info": {
		"_postman_id": "7512e957-3c6f-4a7b-afbe-b4f401e22360",
		"name": "Senior Test Jr",
		"description": "Crud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20364402"
	},
	"item": [
		{
			"name": "Get Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/products/727d6944-4272-42cc-904c-6af01f35d96c",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"727d6944-4272-42cc-904c-6af01f35d96c"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Products All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Products All Paginado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/products?page=1&size=2",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Água com gás 300ml\",\n    \"price\": 2.00,\n    \"type\": \"PRODUCT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"name\": \"Barba e Cabelo\",\n    \"price\": 80.00,\n    \"type\": \"SERVICE\"\n  },\n  {\n    \"name\": \"Massagem Indiana\",\n    \"price\": 100.00,\n    \"type\": \"SERVICE\"\n  },\n  {\n    \"name\": \"Refrigerante 1,5L\",\n    \"price\": 8.00,\n    \"type\": \"PRODUCT\"\n  },\n  {\n    \"name\": \"Shampoo Anticaspa\",\n    \"price\": 75.50,\n    \"type\": \"PRODUCT\"\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products/bulk",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"bulk"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Product Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n    \"name\": \"Lavagem a Seco\",\n    \"price\": 100.00,\n    \"type\": \"SERVICE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Product Invalid Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"price\": 50.00,\n    \"type\": \"SERVICE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Product Invalid Price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Lavagem a Seco\",\n    \"price\": -100.00,\n    \"type\": \"SERVICE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Product Invalid Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Lavagem a Seco\",\n    \"price\": 100.00,\n    \"type\": \"MONEY\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Products Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"name\": \"\",\n    \"price\": 80.00,\n    \"type\": \"SERVICE\"\n  },\n  {\n    \"name\": \"Massagem Indiana\",\n    \"price\": 100.00,\n    \"type\": \"SERVICE\"\n  },\n  {\n    \"name\": \"Refrigerante 1,5L\",\n    \"price\": 8.00,\n    \"type\": \"PRODUCT\"\n  },\n  {\n    \"name\": \"Shampoo Anticaspa\",\n    \"price\": 75.50,\n    \"type\": \"PRODUCT\"\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products/bulk",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"bulk"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n    \"name\": \"Lavagem a Seco\",\n    \"price\": 50.00,\n    \"type\": \"SERVICE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products/727d6944-4272-42cc-904c-6af01f35d96c",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"727d6944-4272-42cc-904c-6af01f35d96c"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Change Product Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n    \"name\": \"Lavagem a Seco\",\n    \"price\": 50.00,\n    \"type\": \"SERVICE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products/727d6944-4272-42cc-904c-6af01f35d96c",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"727d6944-4272-42cc-904c-6af01f35d96c"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/products/727d6944-4272-42cc-904c-6af01f35d96c",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"products",
						"727d6944-4272-42cc-904c-6af01f35d96c"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/orders/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Orders All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/orders",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Orders All Paginado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/orders?page=1&size=1",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "1"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Order With Discount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"discountPercentage\": 3.333,\n  \"items\": [\n    {\n      \"productId\": \"6fce2e1b-f54b-4416-9b1e-0b083f80efd0\",\n      \"itemQuantity\": 3\n    },\n    {\n      \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\",\n      \"itemQuantity\": 33\n    },\n        {\n      \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n       \"itemQuantity\": 3\n    },\n    {\n      \"productId\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\",\n      \"itemQuantity\": 1\n    }\n  ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Invalid Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"discountPercentage\": 3.333,\n  \"items\": [\n    {\n      \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n       \"itemQuantity\": 2\n    },\n    {\n      \"productId\": \"6fce2e1b-f54b-4416-9b1e-0b083f80efd0\",\n      \"itemQuantity\": 3\n    },\n    {\n      \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\",\n      \"itemQuantity\": 33\n    },\n    {\n      \"productId\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\",\n      \"itemQuantity\": 1\n    }\n  ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Invalid Discount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"discountPercentage\": 10,\n  \"items\": [\n    {\n      \"product\": {\n        \"id\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n        \"name\": \"\",\n        \"price\": 50.00,\n        \"type\": \"SERVICE\"\n        },\n      \"itemQuantity\": 2\n    },\n    {\n      \"product\": {\n        \"id\": \"6fce2e1b-f54b-4416-9b1e-0b083f80efd0\",\n        \"name\": \"Lavação Completa\",\n        \"price\": 100.00,\n        \"type\": \"SERVICE\"\n      },\n      \"itemQuantity\": 3\n    },\n    {\n      \"product\": {\n        \"id\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\",\n        \"name\": \"Cerveja 300ml\",\n        \"price\": 4.00,\n        \"type\": \"PRODUCT\"\n      },\n      \"itemQuantity\": 33\n    },\n    {\n      \"product\": {\n        \"id\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\",\n        \"name\": \"Pizza 50cm\",\n        \"price\": 115.00,\n        \"type\": \"PRODUCT\"\n      },\n      \"itemQuantity\": 1\n    }\n  ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"discountPercentage\": 13.333,\n    \"items\": [\n        {\n            \"id\": \"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b\",\n            \"itemQuantity\": 1,\n            \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\"\n        },\n        {\n            \"id\": \"9b1543b0-b42c-453b-a77e-a5708524ef8b\",\n            \"itemQuantity\": 33,\n            \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\"\n        },\n        {\n            \"id\": \"df054afc-5f3c-4092-86d7-b075e70852c9\",\n            \"itemQuantity\": 1,\n            \"productId\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\"\n        }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Change Order Discount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"discountPercentage\": 13.333,\n    \"items\": [\n        {\n            \"id\": \"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b\",\n            \"itemQuantity\": 1,\n            \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\"\n        },\n        {\n            \"id\": \"9b1543b0-b42c-453b-a77e-a5708524ef8b\",\n            \"itemQuantity\": 33,\n            \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\"\n        },\n        {\n            \"id\": \"df054afc-5f3c-4092-86d7-b075e70852c9\",\n            \"itemQuantity\": 1,\n            \"productId\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\"\n        }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Confirm Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"discountPercentage\": 13.333,\n    \"items\": [\n        {\n            \"id\": \"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b\",\n            \"itemQuantity\": 1,\n            \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\"\n        },\n        {\n            \"id\": \"9b1543b0-b42c-453b-a77e-a5708524ef8b\",\n            \"itemQuantity\": 33,\n            \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\"\n        },\n        {\n            \"id\": \"df054afc-5f3c-4092-86d7-b075e70852c9\",\n            \"itemQuantity\": 1,\n            \"productId\": \"2ed297ec-d0af-4671-9847-dd01183f27fd\"\n        }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/orders/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"orders",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get Order Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/order-items/9b1543b0-b42c-453b-a77e-a5708524ef8b",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items",
						"9b1543b0-b42c-453b-a77e-a5708524ef8b"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Order Item All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Order Item All Paginado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/order-items?page=0&size=4",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					],
					"query": [
						{
							"key": "id",
							"value": "1",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "4"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Order Items All By Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/order-items/find-by-order/5448f2a2-9ac0-4e81-8131-86401e3bc824",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items",
						"find-by-order",
						"5448f2a2-9ac0-4e81-8131-86401e3bc824"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Order Item New Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orderId\": \"5448f2a2-9ac0-4e81-8131-86401e3bc824\",\n    \"itemQuantity\": 11,\n    \"productId\": \"f54c8f22-12dc-4a52-9231-693f4e29e3f8\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Item Repeated Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orderId\": \"5448f2a2-9ac0-4e81-8131-86401e3bc824\",\n    \"itemQuantity\": 11,\n    \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1df\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Item Invalid Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orderId\": \"5448f2a2-9ac0-4e81-8131-86401e3bc824\",\n    \"itemQuantity\": 11,\n    \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1d3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Item Invalid Quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"orderId\": \"5448f2a2-9ac0-4e81-8131-86401e3bc824\",\n    \"itemQuantity\": 0,\n    \"productId\": \"92415a5a-beb6-41c4-82d2-0d8a0d6fa1d3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Order Item Invalid Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"itemQuantity\": 11,\n    \"productId\": \"f54c8f22-12dc-4a52-9231-693f4e29e3f8\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Order Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b\",\n    \"productId\": \"727d6944-4272-42cc-904c-6af01f35d96c\",\n    \"itemQuantity\": 33\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items/2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items",
						"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Order Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/order-items/2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"order-items",
						"2347ad3f-2cef-4838-a4fe-aa6a06c9fa8b"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080/"
		}
	]
}